name: "gcloud Setup and deploy action"
description: "Setup docker auth and kubernetes auth and deploy via skaffold"
inputs:
  service_account_key:
    description: "Google Service Key"
    required: true
    default: ""
  project:
    description: "Google Project"
    required: true
  zone:
    description: "Google Zone"
    required: true
  cluster:
    description: "Google Kubernetes Cluster *required if you are deploying"
    required: false
    default: ""
  pre_run_command:
    description: "A command to run before the skaffold command"
    required: false
    default: ""
  post_run_command:
    description: "A command to run after the skaffold command"
    required: false
    default: ""
  namespace:
    description: "Namespace to create before deployment (will be created if it doesn't exist)"
    required: false
    default: ""
  skaffold_command:
    description: "The Skaffold command to use default to run"
    required: false
    default: "run"
  skaffold_profile:
    description: "The Skaffold profile to use (prodcution/dev etc) *required if you are deploying"
    required: false
    default: ""
  skaffold_extra:
    description: "The Skaffold extra args"
    required: false
    default: ""
  docker_slug:
    description: "The docker repo slug e.g: europe-docker.pkg.dev/mailergroup/autossl-caddy/autossl-caddy"
    required: false
    default: ""
  docker_file:
    description: "The docker file path e.g: docker/mailerlite/Dockerfile"
    required: false
    default: "Dockerfile"
  docker_tag:
    description: "The docker tag to overide the git version tag"
    required: false
  docker_build_extra:
    description: "Extra docker build extra args e.g: --build-arg GITHUB_TOKEN=etc"
    required: false
    default: ""
  artifact_registry:
    description: "The artifact_registry to setup auth agains e.g: us-east1-docker.pkg.dev"
    required: false
    default: "europe-docker.pkg.dev"
  helm_app_version:
    description: "Set this to update the Helm chart appVersion to the current tag"
    required: false
    default: ""
  helm_pat:
    description: "PAT for setting up helm repo"
    required: false
    default: ""
runs:
  using: "composite"
  steps:
    - name: Get the version
      shell: bash
      id: get_version
      run: |
        if [ -n "${{ inputs.docker_slug }}" ]; then
          if [ -n "${{ inputs.docker_tag }}" ]; then
            echo 'VERSION=${{ inputs.docker_tag }}' >> $GITHUB_OUTPUT
          else
            echo 'VERSION=${GITHUB_REF/refs\/tags\//}' >> $GITHUB_OUTPUT
          fi
        fi
        if [[ -n "${{ inputs.cluster }}" && -n "${{ inputs.skaffold_profile }}" && -n "${{ inputs.helm_app_version }}" ]]; then
          echo 'VERSION=${GITHUB_REF/refs\/tags\//}' >> $GITHUB_OUTPUT
        fi

    - name: Authenticate with Google Cloud
      shell: bash
      run: |
        echo ${{ inputs.service_account_key }} | base64 -d > /tmp/key.json
        gcloud auth activate-service-account --key-file=/tmp/key.json

    - name: Configure project and region
      shell: bash
      run: |
        gcloud --quiet config set project ${{ inputs.project }}
        gcloud --quiet config set compute/zone ${{ inputs.zone }}

    - name: Docker/Helm Login
      shell: bash
      run: |
        gcloud auth configure-docker ${{ inputs.artifact_registry }} --quiet
        gcloud auth application-default print-access-token | helm registry login -u oauth2accesstoken \
          --password-stdin https://europe-docker.pkg.dev

    - name: Get Cluster Credentials
      shell: bash
      run: |
        if [ -n "${{ inputs.cluster }}" ]; then
          gcloud container clusters get-credentials ${{ inputs.cluster }} --zone=${{ inputs.zone }}
        fi

    - name: Setup Helm repo
      shell: bash
      run: |
        if [[ -n "${{ inputs.cluster }}" && -n "${{ inputs.skaffold_profile }}" && -n "${{ inputs.helm_pat }}" ]]; then
            helm repo add --username ziltoidbot --password ${{ inputs.helm_pat }} mailergroup https://raw.githubusercontent.com/mailergroup/charts/main/index
        fi

    - name: Set appVersion
      shell: bash
      run: |
        if [[ -n "${{ inputs.cluster }}" && -n "${{ inputs.skaffold_profile }}" && -n "${{ inputs.helm_app_version }}" ]]; then
          sed -i "s/^appVersion:.*$/appVersion: ${{ steps.get_version.outputs.VERSION }}/" helm/Chart.yaml
        fi

    - name: Create namespace if specified
      shell: bash
      run: |
        if [ -n "${{ inputs.namespace }}" ]; then
          if ! kubectl get namespace ${{ inputs.namespace }} >/dev/null 2>&1; then
            kubectl create namespace ${{ inputs.namespace }}
            echo "Created namespace ${{ inputs.namespace }}"
          else
            echo "Namespace ${{ inputs.namespace }} already exists"
          fi
        fi

    - name: Run pre run command
      shell: bash
      run: |
        if [ -n "${{ inputs.pre_run_command }}" ]; then
          ${{ inputs.pre_run_command }}
          echo "done"
        fi

    - name: Skaffold build and deploy ${{ inputs.skaffold_profile }}
      shell: bash
      run: |
        if [[ -n "${{ inputs.cluster }}" && -n "${{ inputs.skaffold_profile }}" ]]; then
          helm repo add bjw-s https://bjw-s-labs.github.io/helm-charts/
          skaffold ${{ inputs.skaffold_command }} -p ${{ inputs.skaffold_profile }} ${{ inputs.skaffold_extra }}
        fi

    - name: Build and Push Docker Image if there is a docker slug
      shell: bash
      run: |
        if [ -n "${{ inputs.docker_slug }}" ]; then
          IFS=', ' read -r -a TAG_ARRAY <<< "${{ steps.get_version.outputs.VERSION }}"

          # Start building the docker commands
          docker_build_cmd="docker build ${{ inputs.docker_build_extra }} -f ${{ inputs.docker_file }}"

          # Append -t ${{ inputs.docker_slug }}:tag for each tag
          for tag in "${TAG_ARRAY[@]}"; do
              docker_build_cmd+=" -t ${{ inputs.docker_slug }}:$tag"
          done

          # Add the 'latest' tag and build context (.)
          docker_build_cmd+=" -t ${{ inputs.docker_slug }}:latest ."

          # Print and execute the command
          echo "$docker_build_cmd"
          eval "$docker_build_cmd"

          docker push ${{ inputs.docker_slug }} --all-tags
        fi

    - name: Run post run command
      shell: bash
      run: |
        if [ -n "${{ inputs.post_run_command }}" ]; then
          ${{ inputs.post_run_command }}
          echo "done"
        fi
